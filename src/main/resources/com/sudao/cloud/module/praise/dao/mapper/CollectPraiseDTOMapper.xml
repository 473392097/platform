<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sudao.cloud.module.praise.dao.mapper.CollectPraiseDTOMapper">
  <resultMap id="BaseResultMap" type="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="relation_id" jdbcType="BIGINT" property="relationId" />
    <result column="relation_type" jdbcType="BIT" property="relationType" />
    <result column="action_type" jdbcType="BIT" property="actionType" />
    <result column="status" jdbcType="BIT" property="status" />
    <result column="created_by_id" jdbcType="BIGINT" property="createdById" />
    <result column="created_time" jdbcType="BIGINT" property="createdTime" />
    <result column="updated_by_id" jdbcType="BIGINT" property="updatedById" />
    <result column="updated_time" jdbcType="BIGINT" property="updatedTime" />
    <result column="lastUpdate" jdbcType="TIMESTAMP" property="lastupdate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, relation_id, relation_type, action_type, status, created_by_id, created_time, 
    updated_by_id, updated_time, lastUpdate
  </sql>
  <select id="selectByExample" parameterType="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cloud_component_collect_praise
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from cloud_component_collect_praise
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from cloud_component_collect_praise
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTOExample">
    delete from cloud_component_collect_praise
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTO">
    insert into cloud_component_collect_praise (id, user_id, relation_id, 
      relation_type, action_type, status, 
      created_by_id, created_time, updated_by_id, 
      updated_time, lastUpdate)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{relationId,jdbcType=BIGINT}, 
      #{relationType,jdbcType=BIT}, #{actionType,jdbcType=BIT}, #{status,jdbcType=BIT}, 
      #{createdById,jdbcType=BIGINT}, #{createdTime,jdbcType=BIGINT}, #{updatedById,jdbcType=BIGINT}, 
      #{updatedTime,jdbcType=BIGINT}, #{lastupdate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTO">
    insert into cloud_component_collect_praise
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="relationId != null">
        relation_id,
      </if>
      <if test="relationType != null">
        relation_type,
      </if>
      <if test="actionType != null">
        action_type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createdById != null">
        created_by_id,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="updatedById != null">
        updated_by_id,
      </if>
      <if test="updatedTime != null">
        updated_time,
      </if>
      <if test="lastupdate != null">
        lastUpdate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="relationId != null">
        #{relationId,jdbcType=BIGINT},
      </if>
      <if test="relationType != null">
        #{relationType,jdbcType=BIT},
      </if>
      <if test="actionType != null">
        #{actionType,jdbcType=BIT},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
      <if test="createdById != null">
        #{createdById,jdbcType=BIGINT},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=BIGINT},
      </if>
      <if test="updatedById != null">
        #{updatedById,jdbcType=BIGINT},
      </if>
      <if test="updatedTime != null">
        #{updatedTime,jdbcType=BIGINT},
      </if>
      <if test="lastupdate != null">
        #{lastupdate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTOExample" resultType="java.lang.Long">
    select count(*) from cloud_component_collect_praise
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update cloud_component_collect_praise
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.relationId != null">
        relation_id = #{record.relationId,jdbcType=BIGINT},
      </if>
      <if test="record.relationType != null">
        relation_type = #{record.relationType,jdbcType=BIT},
      </if>
      <if test="record.actionType != null">
        action_type = #{record.actionType,jdbcType=BIT},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=BIT},
      </if>
      <if test="record.createdById != null">
        created_by_id = #{record.createdById,jdbcType=BIGINT},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=BIGINT},
      </if>
      <if test="record.updatedById != null">
        updated_by_id = #{record.updatedById,jdbcType=BIGINT},
      </if>
      <if test="record.updatedTime != null">
        updated_time = #{record.updatedTime,jdbcType=BIGINT},
      </if>
      <if test="record.lastupdate != null">
        lastUpdate = #{record.lastupdate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update cloud_component_collect_praise
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      relation_id = #{record.relationId,jdbcType=BIGINT},
      relation_type = #{record.relationType,jdbcType=BIT},
      action_type = #{record.actionType,jdbcType=BIT},
      status = #{record.status,jdbcType=BIT},
      created_by_id = #{record.createdById,jdbcType=BIGINT},
      created_time = #{record.createdTime,jdbcType=BIGINT},
      updated_by_id = #{record.updatedById,jdbcType=BIGINT},
      updated_time = #{record.updatedTime,jdbcType=BIGINT},
      lastUpdate = #{record.lastupdate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTO">
    update cloud_component_collect_praise
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="relationId != null">
        relation_id = #{relationId,jdbcType=BIGINT},
      </if>
      <if test="relationType != null">
        relation_type = #{relationType,jdbcType=BIT},
      </if>
      <if test="actionType != null">
        action_type = #{actionType,jdbcType=BIT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
      <if test="createdById != null">
        created_by_id = #{createdById,jdbcType=BIGINT},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=BIGINT},
      </if>
      <if test="updatedById != null">
        updated_by_id = #{updatedById,jdbcType=BIGINT},
      </if>
      <if test="updatedTime != null">
        updated_time = #{updatedTime,jdbcType=BIGINT},
      </if>
      <if test="lastupdate != null">
        lastUpdate = #{lastupdate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTO">
    update cloud_component_collect_praise
    set user_id = #{userId,jdbcType=BIGINT},
      relation_id = #{relationId,jdbcType=BIGINT},
      relation_type = #{relationType,jdbcType=BIT},
      action_type = #{actionType,jdbcType=BIT},
      status = #{status,jdbcType=BIT},
      created_by_id = #{createdById,jdbcType=BIGINT},
      created_time = #{createdTime,jdbcType=BIGINT},
      updated_by_id = #{updatedById,jdbcType=BIGINT},
      updated_time = #{updatedTime,jdbcType=BIGINT},
      lastUpdate = #{lastupdate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.sudao.cloud.module.praise.dao.dto.CollectPraiseDTOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cloud_component_collect_praise
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>